{
  "name": "StaticMocks",
  "tagline": "A mocking library capable of mocking .NET and .NET Core static methods",
  "body": "### A mocking library capable of mocking .NET and .NET Core static methods \r\n\r\n#### Getting started\r\n\r\n*For convenience I've put the sample code [here](https://raw.githubusercontent.com/jcansdale/StaticMocks/master/example.cs).*\r\n\r\n* Take the following target code.\r\n\r\n ```c#\r\n    using System.IO;\r\n\r\n    public class TargetClass\r\n    {\r\n        public static string ShoutFile(string path)\r\n        {\r\n            var text = File.ReadAllText(path);\r\n            return text.ToUpperInvariant();\r\n        }\r\n    }\r\n ```\r\n\r\n* Install the *StaticMocks* package from NuGet (check 'Incude prerelease'). *StaticMocks* works nicely with [NSubstitute 2.0](http://nsubstitute.github.io/) and will automatically pull in that package. It also has a simple Moq-like interface if you need to remove the *NSubstitute* dependancy.\r\n\r\n* Write the following test code.\r\n\r\n```c#\r\n    using System;\r\n    using System.IO;\r\n    using StaticMocks;\r\n    using NSubstitute;\r\n    using NUnit.Framework;\r\n\r\n    public class TargetClassTests\r\n    {\r\n        [Test]\r\n        public void ShoutFile()\r\n        {\r\n            using (var staticMock = new StaticMock(typeof(TargetClass)))\r\n            {\r\n                staticMock.For(() => File.ReadAllText(\"foo.txt\")).Returns(\"bar\");\r\n\r\n                var text = TargetClass.ShoutFile(\"foo.txt\");\r\n\r\n                Assert.That(text, Is.EqualTo(\"BAR\"));\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\n* Run the `ShoutFile` test. If you're using [TestDriven.Net](http://testdriven.net) you will see the following.\r\n\r\n```\r\n------ Test started: Assembly: Target.Tests.dll ------\r\n\r\nTest 'Target.Tests.TargetClassTests.ShoutFile' failed: StaticMocks.StaticMockException:\r\n\r\nPlease add the following as a nested class to 'Target.Tests.TargetClass':\r\n\r\nclass File\r\n{\r\n    internal static Func<string, string> ReadAllText = (string path) => System.IO.File.ReadAllText(path);\r\n}\r\n\tSamples\\Sample1.cs(17,0): at Samples.Tests.TargetClassTests.ShoutFile()\r\n\r\n0 passed, 1 failed, 0 skipped, took 0.67 seconds (NUnit 3.4.1).\r\n```\r\n\r\n* Do as the exception message suggests and change your target code to this.\r\n\r\n```c#\r\n    using System;\r\n\r\n    public class TargetClass\r\n    {\r\n        public static string ShoutFile(string path)\r\n        {\r\n            var text = File.ReadAllText(path);\r\n            return text.ToUpperInvariant();\r\n        }\r\n\r\n        class File\r\n        {\r\n            internal static Func<string, string> ReadAllText = (string path) => System.IO.File.ReadAllText(path);\r\n        }\r\n    }\r\n```\r\n\r\n* Run the `ShoutFile` test again and rejoice when the test passes!\r\n\r\n#### Conclusion\r\n\r\nYou've just tested a static method without touching the public interface of\r\nits containing class or running your tests with a special tool. This was made\r\npossible by adding a single auto-generated field/class to the class under test.\r\nYou could use `#if DEBUG` to remove this from the released assembly if you're\r\nso inclined.\r\n\r\nThis is by no means perfect, but it's useful in a lot of common scenarios.\r\nI've been dogfooding it for a little while now.\r\n\r\n#### FAQ\r\n\r\nAsk away in the issues section or tweet me! [jcansdale@twitter.com](https://twitter.com/jcansdale)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}